import nbconvert
import json

# from src import help_functions
import os

# ----siblings import from help functions does not work with typer
def check_for_ending(filename: str, ending: str):
    """checks filename for ending. On not expecting ending ValueError is raised

    Args:
        filename (str): filename to be checked e.g. abc.py
        ending (str): expected ending of the file e.g. .py 

    Raises:
        ValueError: if expected ending is not in filename
    """
    if not filename.endswith(ending):
        raise ValueError(f"{filename} not valid. Should be a file with ending {ending}")
    return


def remove_temp_file(filename: str = "temp_file348234283o23478234ip.py"):
    """Delete temp file which is generated by other functions.

    Args:
        filename (str, optional): filename of temporary file. Defaults to "temp_file348234283o23478234ip.py".
    """
    os.remove(filename)
    return


# -----------------------------------


def jupyterfile_tolist(
    file: str, temp_filename: str = "temp_file348234283o23478234ip.py"
):
    """Converts the code lines of a jupyter file to a list

    Args:
        file (str): name of the jupyter file
        temp_filename (str, optional): name of python file which is temporarily created. Defaults to "temp_file348234283o23478234ip.py".

    Returns:
        [list]: list containing the code lines of the jupyter file
    """
    # Get lines
    exporter = nbconvert.exporters.get_exporter("python")
    jupyter_file = nbconvert.exporters.export(exporter=exporter, nb=file)[0]

    # Write to temp file
    with open(temp_filename, "w") as f:
        f.write(jupyter_file)

    # Read from temp file
    with open(temp_filename, "r") as f:
        lines = f.readlines()

    remove_temp_file(temp_filename)

    return lines


def write_topython(
    lines: list,
    output_filename: str,
    skip_lines: list = ["#!/usr/bin/env python\n", "# coding: utf-8\n"],
):
    """Writes a list of code lines to a file by consideration of databricks logic.

    Args:
        lines (list): contains lines of code
        output_filename (str): name of output python file
        skip_lines (list, optional): Defaults to ["#!/usr/bin/env python\n", "# coding: utf-8\n"].
    """
    # open
    with open(output_filename, "w", encoding="utf8") as f:
        # databricks needs to have the header at the top
        f.write("# Databricks notebook source\n")

        for index, line in enumerate(lines, start=0):
            #Remove unwanted empty spaces
            if (index - 1 >= 0 ):
                if (line == "\n") & ("# In[" in lines[index - 1]):
                    continue
            if (index + 1 < len(lines)):
                if (line == "\n") & ("# In[" in lines[index + 1]):
                    continue

            if "# In[" in line:
                f.write("# COMMAND ----------\n")
            elif line in skip_lines:
                pass
            else:
                f.write(line)
    return


def convert_jupyter_to_databricks(
    input_filename: str = "nofile", output_filename: str = "nofile"
):
    """Main function to convert jupyter files to databricks python files.

    Args:
        input_filename (str, optional): input filename .ipynb. Defaults to "nofile".
        output_filename (str, optional): output filename .py. Defaults to "nofile".

    Raises:
        ValueError: convert_list.json missing
        ValueError: Reading jupyter file error
        ValueError: Writing python file error

    Returns:
        [bool]: returns True if function run successfully
    """
    # Default use the convert_list.json
    if (input_filename == "nofile") & (output_filename == "nofile"):
        try:
            f = open(
                "convert_list.json",
            )
            files = json.load(f)
        except Exception as e:
            raise ValueError(
                f"Loading default list did not work. Make sure to create a convert_list.json: {e}"
            )
    else:
        check_for_ending(input_filename, ".ipynb")
        check_for_ending(output_filename, ".py")
        files = {input_filename: output_filename}

    for file in files:

        # Get Lines from jupyter
        try:
            lines = jupyterfile_tolist(file)
        except Exception as e:
            raise ValueError(
                f"Transforming jupyter file to python file did not work: {e}"
            )

        # write to Python file
        try:
            write_topython(lines, files[file])
        except Exception as e:
            raise ValueError(f"Saving to python file did not work: {e}")

    return True
